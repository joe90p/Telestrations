using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using Moq;

namespace PictureLink.Data.Test
{
    public class MockHelper
    {
        public IRepository GetMockRepository()
        {
            return new MockRepository();
        }

        public class MockRepository : IRepository
        {
            public IEnumerable<T> Query<T>(Expression<Func<T, bool>> where) where T : class
            {
                return Enumerable.Range(1, 9).Select(x => new Mock<T>().Object);
            }

            public void Delete<T>(T target) {}

            public void Save<T>(T target) {}
            public void Insert<T>(object target) {}

            public IEnumerable<IChainDTO> GetUnMarkedChains()
            {
                return Enumerable.Range(1, 3).Select(MakeChain);
            }

            public static IChainDTO MakeChain(int index)
            {
                var chain = new Mock<IChainDTO>();
                var fac = new MockGuessesFactory(chain.Object);
                chain.Setup(c => c.Id).Returns(index);
                var guesses = fac.MakeGuesses();
                chain.Setup(c => c.Guesses).Returns(guesses.ToList());
                return chain.Object;
            }


            public IChainDTO GetChain(int index)
            {
                return MakeChain(index);
            }
        }

        public class MockGuessesFactory
        {

            private IChainDTO chain;

            private Dictionary<int, Tuple<GuessType, string>> contentLookup =
                new Dictionary<int, Tuple<GuessType, string>>();


            public MockGuessesFactory(IChainDTO chain)
            {
                this.chain = chain;
                this.SetupDictionary();
            }

            private void SetupDictionary()
            {
                this.contentLookup.Add(1, Tuple.Create(GuessType.Written, "Clown"));
                this.contentLookup.Add(
                    2,
                    Tuple.Create(
                        GuessType.Drawn,
                        "iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0CAYAAADL1t+KAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAwrSURBVHhe7dyBluOoEQXQTf7/n5OQNVlWAVmSJVHAvedwJt3ptCWZ4lF4Jn8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAET1j8+fMJt/ff5MWvP8288c+R0AIfzz8ycAMDCBzohS55wHAP/hGJERRToKdywPhKBDB4AJ6CiIaKSuV4cOhGABIqJZQlLYA69x5A4AE9A1wHN06MBrLDL0smrYCXngEY7cAWACAh36Sd16HgA/ceQH/WyDXD0Cl+nQAWACOgLo6+xfkvv282d+39nXBgLToUMcOWDTn3kAHCLQeZJgqvNcgNs5ZuNJZWCZa3/ZC/L0nCI/N+8pBKVDhxhSOOaAzP9ZYAKHWTCAM3ToAADwFDts4A06e3iYz9C5U1q08wDgRQIdACbg6Is7OVYF6MSiC0RiUwgXKZjYWp9Fp/ettvBZDBmdOQwX+Qx9LWmxzAOAiQj0OIQt/NmV5wGcoGjiKIP8qfflidd447ohMddgh6Loq9WNv/2+/LJQWmR5i7kGOxy5x5EWqDwA4BTh8Z5adxGl49D5MCpzFz4UwHtGXHi+XbPFlN7MQfhw5P68tOCUiw7wDHXG0gT6u1IHoYuA+6gn+BDo7MkbEIsmo9ClsywL9f1m/Uyvdl+z3ivjMRdZng6dK9LiWS6gAHQm0AFgAo6muKLWnZtL9OTIneXp0O+Rj6BXOYa2YAIEI9CBUa22kYZdOq17lAvKSs901fumn1Z4m38sT4f+m7I7SAuKRQWALgTQb3So8C41Bw0K4jcWF3ieOoMDFAcQURniJWsWNCiO83QL8KxWmCdqDhr8pTgguhTieQANAh2ITIjDQQIdiGTvuB3YIdCBqHTncIJAB4AJCHQAmIAjrfP8szUAwtGhAxGljXMewAE6TCAiJ2Fwkg79PJ0DAOHY+Z6ncwAgHB06AAAARODIGBiJj7ygwZH7ef5SHADhCHQAmIAjq/Mc+QEAAAAAAADMyWfA1/ks/X21Z956H45+/9vXSfm9Uvl7Abryt9yJKAVoHiPYXu/Zr7mH58rSBDoRWIj/5DkAlzky5GmtcCrnXvkzrWPvyL5d/9H7O/t9/s5zYmkmPXfbC6+SwPp/refg+QBfWRy425VAZ5+gB76yCHAHod3HXqALe1iMQr/HqotnLcjNqfcIdOB/FPo9Vls8a0GemVMxbOekgIfJKex7rLBY7oV4Yi7F1pqjKwW9TQ1T8+/Q75EWhzxWs+p9A4RiIeaIbXdu3syj1rXO2snq0JmaSc0RFsK1eL9hQI7c2ZMW9nJxZ115LpgPEJTd93PKhW/U5zzDPXAPcwGC06EDZ+VOvQx5oDOBDhyRuvI8gIAUJ3scs1LT6sxnmCPmPMPSoQNnpaDLAwhCoAN3yZ+rtzp44EF22LQ4euQscwY60qG/TxfDCsxxeJlAB+7ic3XoSKADT9Klw0vspmkpF2LzhLNqQT7LPFIbhKRDB4AJ2F3GYdfPjLad+gxzW60SkskYR6RFwoLFncwneIEjdwCYgN0yNToqgMFYrKkR6Dxl1rmlZujOkTsATECgjyN1AHkAwN84GhrHm0d6jg8BBqNDB4AJ6L6o0aHztFXmmFriNTp0AJiAQB9f6gDyAGBRjoDG98SRnmNCgMHo0KkpQ1znD/fJp2nqitsJ9PGl8M0DgEUJdKAnHSvcRFc3v3Kh9H4TzYrzU03yCB06AExAoLMnH4WWHQXcKXWouUs11+AHAn1+ecHcHu0Ja4CJCHQAmMC2a2Mdrc681sln5gv8Zlt3aorbmEwke6Et0OE3RzfP8BNH7rSkRWi7ELUWJrhLnnejzrXRr5+BCXSS1CnkAXx3NbjVGo8xqWhpLVTmDE8q511trp0N0K3yd9Zeq/X62+8f/Tl4jQnHGRYrzijnS3J0zuzNs+3vPKv8fbXXab329vt71whdOHIH3pJCsAzCkaUQzwNCMBk5Q1fCGXvhvTd/tv87cw0OUCjA064Eu80jnOTInavSgpsH7EmBLJThYYqMq3RQnLW3+WvNIfMMDtKhA29JgSyU4SGKC+hl27HX1iMdOhykQOB+2xDaO2reWqkmjwQ6cJAC4g4rdlGtkN4G+Pbrb1arSaEON/EZOvwlhUttJNuvn/LW60QhwOEmiok7lOEz8pxqhWi6p+097v3sVXshPnOtzjJ/oCvFA/tBmmwD/Km6+XYdiWAHqhQNK9oLzgg1cWSDMSOBDj9QNKxmtLCMvvm40/ZerU9wgoLhblG7rG9BnkSuh9b1zxzq1ic4wd9yZwV7YViOyFrXd2SjAiwg+iLGeCJ2WLXQG3nuz3Y/NRHnEYSmUFjBjOGwDXWBDotz5A5j2oZcrWsHFmLnywpm7vZ0ssB/6dB5WgqcPCKIch0cE23+QFgCHQAmINBZQe3zZh0fMBWfubGSbYjPMP/Le5q5nle5T7hMh87Kcqe+DXqA4djp8rZIndZekI9SG72e59uvG2neQEg6dBjX3oZkNinE8wAqBDor2wuIFJZ5RLRSmGfR3xPoym4X6srQSHWy/bq3Wqi9eV09nke09wBCURRQtxfoRzxVW63reLuWBToEoyiIYISF+mygv6nHMxOuEIxCJILRwiFKuPd8Vr3eMxsJaFAQRDDbIv1G4Pd+TgIdglEQwBURAj2xhsGHf7YGjESAQ4NAJ6rUieUBwBcCHRhN6tLzAD4EOnBW71MTpzdQIdCJShcGcIJAZyQ6s/62z96GC4IQ6AAwAYEOXKU7h0AUJHBUlOP28jqsYfChGBidxf0dPjuH4By5A8AEBDrwTbTuPF1PHsCHYzM4Z7Wj51poRgj0zBoGHzp0ZpS7t1oY3e2t14lCgEJQAh1o2W5UIoR5eU02F1AQ6HBOCpE8ViI8IThFCveaqYOMeC86dGjQobOSFAZ5sM8zgsEIdHjWiJuI7bXqhGEAAh3ulcIvD4DXWHRYXdmNPlEPrc48au1F7s6ffq9gaDp0eFYKnjyic9QOAxPo0FcK0Txo83zgCztw6KsVVG/X5vY6oq0N5fVZt6BChw51KUDy6CXCNUSw+v3DIQId+krdZh5RRO6AdefQINDhnCe75m/h/sRrP3UvwMvsduGcMvzerp9a8F69hr0Qj7Qu9HzeMBQFAudEC/SaI9d15+bgKdtrtF7BDgUC1/UK91+DPXJQ7t2b9Qp2KBC4rhXobwb90XDfM0KgW6vgC0UC10UI9NKVcI+yBtSu3foEJygYuF+vQC8dCfdI9R/hmcHQFA68R2j9qfYcPBv4kcKB96wcWuW9l6xBcBP/xzLQXwq7PAAusTuG/mbs3Lf3NOM9QigKC/prhd0IITjytcNUHLlDfynw8tiTQjKPrPY9YEF2zhBXGdKpVrdfJ3s/Uzrz3x353a2fATrRoUNcKSDziGqEa4QlCHQYRy08a98DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCuP/74N9PuEd3AHgBUAAAAAElFTkSuQmCC"));
                this.contentLookup.Add(3, Tuple.Create(GuessType.Written, "CloudFace"));
                this.contentLookup.Add(
                    4,
                    Tuple.Create(
                        GuessType.Drawn,
                        "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"));
                this.contentLookup.Add(5, Tuple.Create(GuessType.Written, "Birds"));
                this.contentLookup.Add(
                    6,
                    Tuple.Create(
                        GuessType.Drawn,
                        "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"));
                this.contentLookup.Add(7, Tuple.Create(GuessType.Written, "UFOs"));
                this.contentLookup.Add(
                    8,
                    Tuple.Create(
                        GuessType.Drawn,
                        "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"));
            }

            public IGuessDTO MakeGuess(int index)
            {
                var mockGuess = new Mock<IGuessDTO>();
                var mockPlayer = new Mock<IPlayerDTO>();
                mockPlayer.Setup(p => p.Id).Returns(index);
                mockPlayer.Setup(p => p.Name).Returns("player" + index);
                mockGuess.Setup(g => g.Chain).Returns(this.chain);
                mockGuess.Setup(g => g.Content).Returns(this.contentLookup[index].Item2);
                mockGuess.Setup(g => g.Contributor).Returns(mockPlayer.Object);
                mockGuess.Setup(g => g.Type).Returns(this.contentLookup[index].Item1);
                return mockGuess.Object;

            }

            public IEnumerable<IGuessDTO> MakeGuesses()
            {
                return Enumerable.Range(1, 8).Select(this.MakeGuess);
            }
        }
    }
}
